# 1 "src/ast/lexer.mll"
 
 open Lexing
 open Parser


 exception Lexical_error of string * string * int * int

let string_buff = Buffer.create 256

let char_for_backslash = function
  | 'a' -> '\007'
  | 'b' -> '\008'
  | 't' -> '\009'
  | 'n' -> '\010'
  | 'v' -> '\011'
  | 'f' -> '\012'
  | 'r' -> '\013'
  | c   -> c

let raise_lexical_error lexbuf msg =
  let p = Lexing.lexeme_start_p lexbuf in
  raise (Lexical_error (msg,
                        p.Lexing.pos_fname,
                        p.Lexing.pos_lnum,
                        p.Lexing.pos_cnum - p.Lexing.pos_bol + 1))

(* keyword table *)
let kwd_table:(string,token) Hashtbl.t = Hashtbl.create 30
let _ =
  List.iter (fun (a,b) -> Hashtbl.add kwd_table a b)
    [
      "var",      VAR;
      "let",      LET;
      "in",       IN;
      "type",     TYPE;
      "array",    ARRAY;
      "end",      END;
      "of",       OF;
      "if",       IF;
      "while",    WHILE;
      "do",       DO;
      "then",     THEN;
      "else",     ELSE
    ]

# 48 "src/ast/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\005\000\007\000\229\255\002\000\232\255\
    \077\000\234\255\235\255\237\255\239\255\002\000\003\000\074\000\
    \004\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\
    \253\255\072\000\162\000\237\000\231\255\236\255\242\255\241\255\
    \238\255\094\001\001\000\252\255\253\255\045\000\255\255\254\255\
    \129\000\251\255\091\001\255\255\147\000\164\001\254\255\187\001\
    \253\255\060\001\252\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\027\000\026\000\255\255\025\000\255\255\
    \022\000\255\255\255\255\255\255\255\255\015\000\012\000\011\000\
    \010\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\000\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\255\255\255\255\002\000\255\255\255\255\
    \255\255\255\255\004\000\255\255\003\000\255\255\255\255\002\000\
    \255\255\003\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\006\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\036\000\255\255\000\000\000\000\255\255\000\000\000\000\
    \041\000\000\000\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\005\000\035\000\255\255\004\000\003\000\255\255\
    \003\000\005\000\003\000\000\000\003\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\007\000\006\000\000\000\003\000\010\000\003\000\
    \024\000\023\000\017\000\019\000\020\000\018\000\028\000\016\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\013\000\012\000\015\000\011\000\014\000\032\000\
    \031\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\022\000\039\000\021\000\000\000\025\000\
    \000\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\000\000\009\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\030\000\
    \029\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\043\000\000\000\000\000\000\000\027\000\
    \000\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\042\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \002\000\026\000\255\255\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \000\000\000\000\000\000\000\000\027\000\000\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \035\000\000\000\000\000\034\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\046\000\000\000\046\000\000\000\000\000\
    \038\000\255\255\046\000\000\000\000\000\000\000\000\000\000\000\
    \037\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
    \000\000\000\000\000\000\000\000\046\000\046\000\000\000\000\000\
    \000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\046\000\000\000\000\000\000\000\046\000\000\000\046\000\
    \000\000\046\000\000\000\045\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\000\000\000\000\000\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\034\000\006\000\000\000\003\000\006\000\
    \004\000\004\000\003\000\255\255\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\003\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\037\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\015\000\
    \015\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\040\000\255\255\255\255\255\255\025\000\
    \255\255\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\255\255\040\000\255\255\255\255\
    \255\255\255\255\255\255\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\255\255\255\255\255\255\
    \000\000\026\000\006\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \255\255\255\255\255\255\255\255\027\000\255\255\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \033\000\255\255\255\255\033\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\042\000\255\255\042\000\255\255\255\255\
    \033\000\040\000\042\000\255\255\255\255\255\255\255\255\255\255\
    \033\000\255\255\255\255\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\000\
    \255\255\255\255\255\255\255\255\042\000\042\000\255\255\255\255\
    \255\255\042\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\042\000\255\255\255\255\255\255\042\000\255\255\042\000\
    \255\255\042\000\255\255\042\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\045\000\045\000\045\000\
    \045\000\045\000\045\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\047\000\047\000\047\000\047\000\
    \047\000\047\000\255\255\255\255\255\255\045\000\045\000\045\000\
    \045\000\045\000\045\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\047\000\047\000\047\000\047\000\
    \047\000\047\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\033\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 63 "src/ast/lexer.mll"
                                                        id
# 274 "src/ast/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 63 "src/ast/lexer.mll"
                                                           ( try Hashtbl.find kwd_table id with Not_found -> ID id )
# 278 "src/ast/lexer.ml"

  | 1 ->
let
# 64 "src/ast/lexer.mll"
                                                               id
# 284 "src/ast/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 64 "src/ast/lexer.mll"
                                                                  ( TYPID (String.sub id 1 (String.length id - 1)) )
# 288 "src/ast/lexer.ml"

  | 2 ->
# 66 "src/ast/lexer.mll"
      (LP)
# 293 "src/ast/lexer.ml"

  | 3 ->
# 67 "src/ast/lexer.mll"
      (RP)
# 298 "src/ast/lexer.ml"

  | 4 ->
# 68 "src/ast/lexer.mll"
      (LB)
# 303 "src/ast/lexer.ml"

  | 5 ->
# 69 "src/ast/lexer.mll"
      (RB)
# 308 "src/ast/lexer.ml"

  | 6 ->
# 70 "src/ast/lexer.mll"
      (COMMA)
# 313 "src/ast/lexer.ml"

  | 7 ->
# 72 "src/ast/lexer.mll"
         ( ADD )
# 318 "src/ast/lexer.ml"

  | 8 ->
# 73 "src/ast/lexer.mll"
         ( SUB )
# 323 "src/ast/lexer.ml"

  | 9 ->
# 74 "src/ast/lexer.mll"
         ( MUL )
# 328 "src/ast/lexer.ml"

  | 10 ->
# 75 "src/ast/lexer.mll"
         ( DIV )
# 333 "src/ast/lexer.ml"

  | 11 ->
# 76 "src/ast/lexer.mll"
         ( LT )
# 338 "src/ast/lexer.ml"

  | 12 ->
# 77 "src/ast/lexer.mll"
         ( GT )
# 343 "src/ast/lexer.ml"

  | 13 ->
# 78 "src/ast/lexer.mll"
         ( LE )
# 348 "src/ast/lexer.ml"

  | 14 ->
# 79 "src/ast/lexer.mll"
         ( GE )
# 353 "src/ast/lexer.ml"

  | 15 ->
# 80 "src/ast/lexer.mll"
         ( COLON  )
# 358 "src/ast/lexer.ml"

  | 16 ->
# 81 "src/ast/lexer.mll"
         ( SEMI  )
# 363 "src/ast/lexer.ml"

  | 17 ->
# 82 "src/ast/lexer.mll"
         ( ASSIGN )
# 368 "src/ast/lexer.ml"

  | 18 ->
# 83 "src/ast/lexer.mll"
         ( EQ )
# 373 "src/ast/lexer.ml"

  | 19 ->
# 84 "src/ast/lexer.mll"
         ( NE )
# 378 "src/ast/lexer.ml"

  | 20 ->
# 85 "src/ast/lexer.mll"
         ( AND )
# 383 "src/ast/lexer.ml"

  | 21 ->
# 86 "src/ast/lexer.mll"
         ( OR )
# 388 "src/ast/lexer.ml"

  | 22 ->
let
# 89 "src/ast/lexer.mll"
         c
# 394 "src/ast/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 89 "src/ast/lexer.mll"
           ( CONST (int_of_string c) )
# 398 "src/ast/lexer.ml"

  | 23 ->
# 91 "src/ast/lexer.mll"
    ( Buffer.clear string_buff;
      string lexbuf;
      STRING (Buffer.contents string_buff) )
# 405 "src/ast/lexer.ml"

  | 24 ->
# 96 "src/ast/lexer.mll"
       ( comment lexbuf; token lexbuf )
# 410 "src/ast/lexer.ml"

  | 25 ->
# 97 "src/ast/lexer.mll"
                     ( token lexbuf )
# 415 "src/ast/lexer.ml"

  | 26 ->
# 98 "src/ast/lexer.mll"
          ( new_line lexbuf; token lexbuf )
# 420 "src/ast/lexer.ml"

  | 27 ->
# 99 "src/ast/lexer.mll"
        ( token lexbuf )
# 425 "src/ast/lexer.ml"

  | 28 ->
# 101 "src/ast/lexer.mll"
      ( EOF )
# 430 "src/ast/lexer.ml"

  | 29 ->
# 103 "src/ast/lexer.mll"
    ( raise_lexical_error lexbuf
        ("illegal character " ^ String.escaped(Lexing.lexeme lexbuf))
    )
# 437 "src/ast/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 33
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 109 "src/ast/lexer.mll"
      ( () )
# 449 "src/ast/lexer.ml"

  | 1 ->
# 110 "src/ast/lexer.mll"
       ( () )
# 454 "src/ast/lexer.ml"

  | 2 ->
# 111 "src/ast/lexer.mll"
                ( comment lexbuf )
# 459 "src/ast/lexer.ml"

  | 3 ->
# 112 "src/ast/lexer.mll"
          ( new_line lexbuf; comment lexbuf )
# 464 "src/ast/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 40
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 115 "src/ast/lexer.mll"
      ( () )
# 476 "src/ast/lexer.ml"

  | 1 ->
let
# 116 "src/ast/lexer.mll"
                             c
# 482 "src/ast/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 117 "src/ast/lexer.mll"
    ( Buffer.add_char string_buff (char_for_backslash c);
      string lexbuf )
# 487 "src/ast/lexer.ml"

  | 2 ->
let
# 119 "src/ast/lexer.mll"
                             c
# 493 "src/ast/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 120 "src/ast/lexer.mll"
    ( Buffer.add_char string_buff (Char.chr (int_of_string ("0x" ^ c)));
      string lexbuf )
# 498 "src/ast/lexer.ml"

  | 3 ->
let
# 122 "src/ast/lexer.mll"
                           c
# 504 "src/ast/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 123 "src/ast/lexer.mll"
    ( Buffer.add_char string_buff (Char.chr (int_of_string ("0o" ^ c)));
      string lexbuf )
# 509 "src/ast/lexer.ml"

  | 4 ->
let
# 125 "src/ast/lexer.mll"
       c
# 515 "src/ast/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 126 "src/ast/lexer.mll"
    ( Buffer.add_char string_buff c;
      string lexbuf )
# 520 "src/ast/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

